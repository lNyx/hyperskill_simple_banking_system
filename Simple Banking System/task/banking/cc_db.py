import sqlite3


class CreditCardsDB:

    __DB_FILENAME = "card.s3db"

    def __init__(self, db_filename=None):
        self.__DB_FILENAME = db_filename or self.__DB_FILENAME
        self.__db_connection = None
        self.__cursor = None

        self.open()


    # def __del__(self):
    #     self.__db_connection.close()


    def __enter__(self):
        return self


    def __exit__(self, ext_type, exc_value, traceback):
        self.__cursor.close()
        if isinstance(exc_value, Exception):
            self.__db_connection.rollback()
        else:
            self.__db_connection.commit()
        self.__db_connection.close()


    def open(self):
        try:
            self.__db_connection = sqlite3.connect(self.__DB_FILENAME)
            self.__cursor = self.__db_connection.cursor()

        except sqlite3.Error as e:
            # print(f"SQLite error: {e}")
            print("Error on connecting to database!")


    def close(self):
        if self.__db_connection:
            self.__db_connection.commit()
            self.__cursor.close()
            self.__db_connection.close()


    def create_card_table(self):
        """card table attributes are;
           id: int, number: str, pin: str, balance: int"""

        query = """CREATE TABLE IF NOT EXISTS card(
                                                  id INTEGER PRIMARY KEY,
                                                  number TEXT UNIQUE,
                                                  pin TEXT,
                                                  balance INTEGER DEFAULT 0,
                                                  CHECK (balance >= 0)
                                                );"""
        try:
            self.__cursor.execute(query)
            self.__db_connection.commit()

        except sqlite3.Error as e:
            self.__db_connection.rollback()
            # print(f"SQLite error: {e}")
            print("Error on creating table!")
            return False

        return True


    def add_new_card(self, number: str, pin: str, balance=0) -> bool:

        query = """INSERT INTO card
                   VALUES(NULL, ?, ?, ?)"""  # id will be generated by the db.

        try:
            self.__cursor.execute(query, (number, pin, balance))
            self.__db_connection.commit()

            self.__cursor.execute("SELECT changes();")
            insert_status = bool(self.__cursor.fetchone()[0])

        except sqlite3.Error as e:
            self.__db_connection.rollback()
            # print(f"SQLite error: {e}")
            print("Error on adding new card!")
            return False

        return insert_status


    def card_exists(self, card_number):
        query = """SELECT COUNT(*) FROM card
                   WHERE number = ?"""

        try:
            self.__cursor.execute(query, (card_number,))
            res = bool(self.__cursor.fetchone()[0])

        except sqlite3.Error as e:
            # print(f"SQLite error: {e}")
            print("Error on verifying card existence!")
            return False

        return res


    def verify_card(self, card_number, card_pin):
        query = """SELECT pin FROM card
                   WHERE number = ?"""

        try:
            self.__cursor.execute(query, (card_number,))
            res = self.__cursor.fetchone()

        except sqlite3.Error as e:
            # print(f"SQLite error: {e}")
            print("Error on verifying card!")
            return False

        return bool(res) and card_pin == res[0]


    def get_card_balance(self, card_number, card_pin):
        query = """SELECT balance FROM card
                   WHERE number = ?
                         AND pin = ?"""

        try:
            self.__cursor.execute(query, (card_number, card_pin))
            res = self.__cursor.fetchone()

        except sqlite3.Error as e:
            # print(f"SQLite error: {e}")
            print("Error on reading card balance!")
            return False

        return res[0] if res else None


    def deposit_to_card(self, card_number, amount):
        # if not self.card_exists(card_number):
        #     return False

        query = """UPDATE card
                   SET balance = balance + ?
                   WHERE number = ?"""

        try:
            self.__cursor.execute(query, (amount, card_number))
            self.__db_connection.commit()

            self.__cursor.execute("SELECT changes();")
            update_status = bool(self.__cursor.fetchone()[0])

        except sqlite3.Error as e:
            self.__db_connection.rollback()
            # print(f"SQLite error: {e}")
            print("Error on depositing to card!")
            return False

        return update_status


    def delete_card(self, card_number, card_pin):
        # if not self.card_exists(card_number):
        #     return False

        query = """DELETE FROM card
                   WHERE number = ?
                         AND pin = ?"""

        try:
            self.__cursor.execute(query, (card_number, card_pin))
            self.__db_connection.commit()

            self.__cursor.execute("SELECT changes();")
            delete_status = bool(self.__cursor.fetchone()[0])

        except sqlite3.Error as e:
            self.__db_connection.rollback()
            # print(f"SQLite error: {e}")
            print("Error on deleting card account!")
            return False

        return delete_status


    def transfer_funds(self, from_card_number, from_card_pin, to_card_number, amount):
        if amount < 0 or not self.verify_card(from_card_number, from_card_pin) or not self.card_exists(to_card_number):
            return False

        query = """UPDATE OR ROLLBACK card
                   SET balance = balance + ?
                   WHERE number = ?"""
        ver = """        AND pin = ?"""

        try:
            self.__cursor.execute(query+ver, (-amount, from_card_number, from_card_pin))

            self.__cursor.execute("SELECT changes();")
            transfer_status = self.__cursor.fetchone()[0]

            self.__cursor.execute(query, (amount, to_card_number))

            self.__cursor.execute("SELECT changes();")
            transfer_status += self.__cursor.fetchone()[0]

            self.__db_connection.commit()

        except sqlite3.Error as e:
            self.__db_connection.rollback()
            # print(f"SQLite error: {e}")
            print("Error on transferring funds!")
            return False

        return transfer_status == 2


########################################################################################################################
    # def __read_card_info(self, card_number):
    #
    #     query = """SELECT * FROM card
    #                WHERE number = ?"""
    #
    #     try:
    #         self.__cursor.execute(query, (card_number,))
    #     except sqlite3.Error as e:
    #         # print(f"SQLite error: {e}")
    #         print("Error on reading card information!")
    #         return None
    #
    #     return self.__cursor.fetchall()

    # def card_exists(self, card_number):
    #     return bool(self.__read_card_info(card_number))

    # def verify_card(self, card_number, card_pin):
    #     card_info_from_db = self.__read_card_info(card_number)
    #     return card_info_from_db and card_info_from_db[0][2] == card_pin

    # def get_card_balance(self, card_number, card_pin):
    #     if self.verify_card(card_number, card_pin):
    #         return self.__read_card_info(card_number)[0][3]
